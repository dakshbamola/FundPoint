import{cr as m,aE as l,ah as u,cs as g,aF as d,az as s,b5 as f,A as C,aa as e,ad as o}from"./index.2d14a236.js";import{a as w,b as W,G as y,C as T}from"./contract-appuri-5c40af52.browser.esm.a027de7b.js";import{C as R}from"./contract-interceptor-d7b164a7.browser.esm.b65ebba9.js";import{C as A}from"./contract-platform-fee-e756e68f.browser.esm.74608680.js";import{C as b}from"./contract-roles-71988d2e.browser.esm.533bcb10.js";import{C as E}from"./contract-sales-918c7cb8.browser.esm.5bc23edb.js";import{D as S}from"./drop-claim-conditions-e6f2abbf.browser.esm.e50fecba.js";import{S as O}from"./erc-20-standard-1e9d9631.browser.esm.56f14a7c.js";import"./index.d0fc777d.js";import"./treeify.12a4e25e.js";import"./assertEnabled-d1700f0b.browser.esm.ee464f74.js";import"./setErc20Allowance-7f76f677.browser.esm.2db1466d.js";import"./erc-20-9a18a51c.browser.esm.b84a7556.js";class i extends O{static contractRoles=m;constructor(t,r,a){let n=arguments.length>3&&arguments[3]!==void 0?arguments[3]:{},c=arguments.length>4?arguments[4]:void 0,p=arguments.length>5?arguments[5]:void 0,h=arguments.length>6&&arguments[6]!==void 0?arguments[6]:new l(t,r,c,n,a);super(h,a,p),this.abi=u.parse(c||[]),this.metadata=new w(this.contractWrapper,g,this.storage),this.app=new W(this.contractWrapper,this.metadata,this.storage),this.roles=new b(this.contractWrapper,i.contractRoles),this.encoder=new d(this.contractWrapper),this.estimator=new y(this.contractWrapper),this.events=new T(this.contractWrapper),this.sales=new E(this.contractWrapper),this.platformFees=new A(this.contractWrapper),this.interceptor=new R(this.contractWrapper),this.claimConditions=new S(this.contractWrapper,this.metadata,this.storage)}async getVoteBalance(){return await this.getVoteBalanceOf(await this.contractWrapper.getSignerAddress())}async getVoteBalanceOf(t){return await this.erc20.getValue(await this.contractWrapper.read("getVotes",[await s(t)]))}async getDelegation(){return await this.getDelegationOf(await this.contractWrapper.getSignerAddress())}async getDelegationOf(t){return await this.contractWrapper.read("delegates",[await s(t)])}async isTransferRestricted(){return!await this.contractWrapper.read("hasRole",[f("transfer"),C])}claim=e((()=>{var t=this;return async function(r){let a=arguments.length>1&&arguments[1]!==void 0?arguments[1]:!0;return t.claimTo.prepare(await t.contractWrapper.getSignerAddress(),r,a)}})());claimTo=e((()=>{var t=this;return async function(r,a){let n=arguments.length>2&&arguments[2]!==void 0?arguments[2]:!0;return t.erc20.claimTo.prepare(r,a,{checkERC20Allowance:n})}})());delegateTo=e(async t=>o.fromContractWrapper({contractWrapper:this.contractWrapper,method:"delegate",args:[await s(t)]}));burnTokens=e(async t=>this.erc20.burn.prepare(t));burnFrom=e(async(t,r)=>this.erc20.burnFrom.prepare(t,r));async prepare(t,r,a){return o.fromContractWrapper({contractWrapper:this.contractWrapper,method:t,args:r,overrides:a})}async call(t,r,a){return this.contractWrapper.call(t,r,a)}}export{i as TokenDrop};
