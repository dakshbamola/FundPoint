import{aB as w,bS as g,aC as v,aD as O,ck as _,cl as S,aE as k,ah as L,cm as q,aF as U,b5 as F,A as N,B as u,bp as R,aZ as f,aa as m,ad as l,az as E,b2 as $,cn as x,J as y,co as D}from"./index.2d14a236.js";import{h as V}from"./hasERC20Allowance-654a940b.browser.esm.31fc7b02.js";import{R as M,a as z}from"./assertEnabled-d1700f0b.browser.esm.ee464f74.js";import{a as B,b as K,G as Q,C as I,d as Y}from"./contract-appuri-5c40af52.browser.esm.a027de7b.js";import{i as P}from"./marketplace-e3129e2f.browser.esm.3f7805e3.js";import{b as j}from"./QueryParams-32a56510.browser.esm.2fc06c3f.js";import{C as G}from"./contract-interceptor-d7b164a7.browser.esm.b65ebba9.js";import{C as Z,a as H}from"./contract-owner-49e75547.browser.esm.b51e36d3.js";import{C as J}from"./contract-roles-71988d2e.browser.esm.533bcb10.js";import{S as X}from"./erc-1155-standard-a5888d37.browser.esm.9dba7db9.js";import{E as tt}from"./erc-20-9a18a51c.browser.esm.b84a7556.js";import{N as rt}from"./setErc20Allowance-7f76f677.browser.esm.2db1466d.js";import"./index.d0fc777d.js";import"./treeify.12a4e25e.js";import"./erc-1155-7ce9bee1.browser.esm.3f8b6284.js";import"./drop-claim-conditions-e6f2abbf.browser.esm.e50fecba.js";const A=(()=>w.object({contractAddress:O}))(),et=(()=>A.extend({quantity:v}))(),at=(()=>A.extend({tokenId:g}))(),nt=(()=>A.extend({tokenId:g,quantity:g}))(),st=(()=>et.omit({quantity:!0}).extend({quantityPerReward:v}))(),ot=at,ct=(()=>nt.omit({quantity:!0}).extend({quantityPerReward:g}))(),dt=(()=>st.extend({totalRewards:g.default("1")}))(),it=ot,pt=(()=>ct.extend({totalRewards:g.default("1")}))(),b=(()=>w.object({erc20Rewards:w.array(dt).default([]),erc721Rewards:w.array(it).default([]),erc1155Rewards:w.array(pt).default([])}))(),ht=(()=>b.extend({packMetadata:rt,rewardsPerPack:g.default("1"),openStartTime:M.default(new Date)}))();class ut{featureName=S.name;constructor(t,r,a,s,n){let o=arguments.length>5&&arguments[5]!==void 0?arguments[5]:new k(t,r,x,s,a);this.contractWrapper=o,this.storage=a,this.chainId=n,this.events=new I(this.contractWrapper)}onNetworkUpdated(t){this.contractWrapper.updateSignerOrProvider(t)}getAddress(){return this.contractWrapper.address}open=m((()=>{var t=this;return async function(r){let a=arguments.length>1&&arguments[1]!==void 0?arguments[1]:1,s=arguments.length>2&&arguments[2]!==void 0?arguments[2]:5e5;return l.fromContractWrapper({contractWrapper:t.contractWrapper,method:"openPack",args:[r,a],overrides:{gasLimit:s},parse:n=>{let o=u.from(0);try{o=t.contractWrapper.parseLogs("PackOpenRequested",n?.logs)[0].args.requestId}catch{}return{receipt:n,id:o}}})}})());claimRewards=m((()=>{var t=this;return async function(){let r=arguments.length>0&&arguments[0]!==void 0?arguments[0]:5e5;return l.fromContractWrapper({contractWrapper:t.contractWrapper,method:"claimRewards",args:[],overrides:{gasLimit:r},parse:async a=>{const s=t.contractWrapper.parseLogs("PackOpened",a?.logs);if(s.length===0)throw new Error("PackOpened event not found");const n=s[0].args.rewardUnitsDistributed;return await t.parseRewards(n)}})}})());async parseRewards(t){const r=[],a=[],s=[];for(const n of t)switch(n.tokenType){case 0:{const o=await R(this.contractWrapper.getProvider(),n.assetContract);r.push({contractAddress:n.assetContract,quantityPerReward:f(n.totalAmount,o.decimals).toString()});break}case 1:{a.push({contractAddress:n.assetContract,tokenId:n.tokenId.toString()});break}case 2:{s.push({contractAddress:n.assetContract,tokenId:n.tokenId.toString(),quantityPerReward:n.totalAmount.toString()});break}}return{erc20Rewards:r,erc721Rewards:a,erc1155Rewards:s}}async addPackOpenEventListener(t){return this.events.addEventListener("PackOpened",async r=>{t(r.data.packId.toString(),r.data.opener,await this.parseRewards(r.data.rewardUnitsDistributed))})}async canClaimRewards(t){const r=await E(t||await this.contractWrapper.getSignerAddress());return await this.contractWrapper.read("canClaimRewards",[r])}async openAndClaim(t){let r=arguments.length>1&&arguments[1]!==void 0?arguments[1]:1,a=arguments.length>2&&arguments[2]!==void 0?arguments[2]:5e5;const s=await this.contractWrapper.sendTransaction("openPackAndClaimRewards",[t,r,a],{gasLimit:u.from(5e5)});let n=u.from(0);try{n=this.contractWrapper.parseLogs("PackOpenRequested",s?.logs)[0].args.requestId}catch{}return{receipt:s,id:n}}async getLinkBalance(){const t=(await y(()=>import("./index.2d14a236.js").then(r=>r.en),["assets/index.2d14a236.js","assets/index.042f72c2.css"])).default;return this.getLinkContract(t).balanceOf(this.contractWrapper.address)}async transferLink(t){const r=(await y(()=>import("./index.2d14a236.js").then(a=>a.en),["assets/index.2d14a236.js","assets/index.042f72c2.css"])).default;await this.getLinkContract(r).transfer(this.contractWrapper.address,t)}getLinkContract(t){const r=D[this.chainId];if(!r)throw new Error(`No LINK token address found for chainId ${this.chainId}`);const a=new k(this.contractWrapper.getSignerOrProvider(),r,t,this.contractWrapper.options,this.storage);return new tt(a,this.storage,this.chainId)}}class T extends X{static contractRoles=_;get vrf(){return z(this._vrf,S)}constructor(t,r,a){let s=arguments.length>3&&arguments[3]!==void 0?arguments[3]:{},n=arguments.length>4?arguments[4]:void 0,o=arguments.length>5?arguments[5]:void 0,d=arguments.length>6&&arguments[6]!==void 0?arguments[6]:new k(t,r,n,s.gasless&&"openzeppelin"in s.gasless?{...s,gasless:{...s.gasless,openzeppelin:{...s.gasless.openzeppelin,useEOAForwarder:!0}}}:s,a);super(d,a,o),this.abi=L.parse(n||[]),this.metadata=new B(this.contractWrapper,q,this.storage),this.app=new K(this.contractWrapper,this.metadata,this.storage),this.roles=new J(this.contractWrapper,T.contractRoles),this.royalties=new Z(this.contractWrapper,this.metadata),this.encoder=new U(this.contractWrapper),this.estimator=new Q(this.contractWrapper),this.events=new I(this.contractWrapper),this.interceptor=new G(this.contractWrapper),this.owner=new H(this.contractWrapper),this._vrf=this.detectVrf()}onNetworkUpdated(t){this.contractWrapper.updateSignerOrProvider(t),this._vrf?.onNetworkUpdated(t)}getAddress(){return this.contractWrapper.address}async get(t){return this.erc1155.get(t)}async getAll(t){return this.erc1155.getAll(t)}async getOwned(t){return this.erc1155.getOwned(t)}async getTotalCount(){return this.erc1155.totalCount()}async isTransferRestricted(){return!await this.contractWrapper.read("hasRole",[F("transfer"),N])}async getPackContents(t){const{contents:r,perUnitAmounts:a}=await this.contractWrapper.read("getPackContents",[t]),s=[],n=[],o=[];for(let d=0;d<r.length;d++){const c=r[d],e=a[d];switch(c.tokenType){case 0:{const p=await R(this.contractWrapper.getProvider(),c.assetContract),i=f(e,p.decimals),h=f(u.from(c.totalAmount).div(e),p.decimals);s.push({contractAddress:c.assetContract,quantityPerReward:i,totalRewards:h});break}case 1:{n.push({contractAddress:c.assetContract,tokenId:c.tokenId.toString()});break}case 2:{o.push({contractAddress:c.assetContract,tokenId:c.tokenId.toString(),quantityPerReward:e.toString(),totalRewards:u.from(c.totalAmount).div(e).toString()});break}}}return{erc20Rewards:s,erc721Rewards:n,erc1155Rewards:o}}create=m(async t=>{const r=await this.contractWrapper.getSignerAddress();return this.createTo.prepare(r,t)});addPackContents=m(async(t,r)=>{const[a,s]=await Promise.all([this.contractWrapper.getSignerAddress(),b.parseAsync(r)]),{contents:n,numOfRewardUnits:o}=await this.toPackContentArgs(s);return l.fromContractWrapper({contractWrapper:this.contractWrapper,method:"addPackContents",args:[t,n,o,a],parse:d=>{const c=this.contractWrapper.parseLogs("PackUpdated",d?.logs);if(c.length===0)throw new Error("PackUpdated event not found");const e=c[0].args.packId;return{id:e,receipt:d,data:()=>this.erc1155.get(e)}}})});createTo=m(async(t,r)=>{const[a,s,n]=await Promise.all([j(r.packMetadata,this.storage),ht.parseAsync(r),E(t)]),{erc20Rewards:o,erc721Rewards:d,erc1155Rewards:c}=s,e={erc20Rewards:o,erc721Rewards:d,erc1155Rewards:c},{contents:p,numOfRewardUnits:i}=await this.toPackContentArgs(e);return l.fromContractWrapper({contractWrapper:this.contractWrapper,method:"createPack",args:[p,i,a,s.openStartTime,s.rewardsPerPack,n],parse:h=>{const C=this.contractWrapper.parseLogs("PackCreated",h?.logs);if(C.length===0)throw new Error("PackCreated event not found");const W=C[0].args.packId;return{id:W,receipt:h,data:()=>this.erc1155.get(W)}}})});open=m((()=>{var t=this;return async function(r){let a=arguments.length>1&&arguments[1]!==void 0?arguments[1]:1,s=arguments.length>2&&arguments[2]!==void 0?arguments[2]:5e5;if(t._vrf)throw new Error("This contract is using Chainlink VRF, use `contract.vrf.open()` or `contract.vrf.openAndClaim()` instead");return l.fromContractWrapper({contractWrapper:t.contractWrapper,method:"openPack",args:[r,a],overrides:{gasLimit:s},parse:async n=>{const o=t.contractWrapper.parseLogs("PackOpened",n?.logs);if(o.length===0)throw new Error("PackOpened event not found");const d=o[0].args.rewardUnitsDistributed,c=[],e=[],p=[];for(const i of d)switch(i.tokenType){case 0:{const h=await R(t.contractWrapper.getProvider(),i.assetContract);c.push({contractAddress:i.assetContract,quantityPerReward:f(i.totalAmount,h.decimals).toString()});break}case 1:{e.push({contractAddress:i.assetContract,tokenId:i.tokenId.toString()});break}case 2:{p.push({contractAddress:i.assetContract,tokenId:i.tokenId.toString(),quantityPerReward:i.totalAmount.toString()});break}}return{erc20Rewards:c,erc721Rewards:e,erc1155Rewards:p}}})}})());async toPackContentArgs(t){const r=[],a=[],{erc20Rewards:s,erc721Rewards:n,erc1155Rewards:o}=t,d=this.contractWrapper.getProvider(),c=await this.contractWrapper.getSignerAddress();for(const e of s){const i=(await $(d,e.quantityPerReward,e.contractAddress)).mul(e.totalRewards);if(!await V(this.contractWrapper,e.contractAddress,i))throw new Error(`ERC20 token with contract address "${e.contractAddress}" does not have enough allowance to transfer.

You can set allowance to the multiwrap contract to transfer these tokens by running:

await sdk.getToken("${e.contractAddress}").setAllowance("${this.getAddress()}", ${i});

`);a.push(e.totalRewards),r.push({assetContract:e.contractAddress,tokenType:0,totalAmount:i,tokenId:0})}for(const e of n){if(!await P(this.contractWrapper.getProvider(),this.getAddress(),e.contractAddress,e.tokenId,c))throw new Error(`ERC721 token "${e.tokenId}" with contract address "${e.contractAddress}" is not approved for transfer.

You can give approval the multiwrap contract to transfer this token by running:

await sdk.getNFTCollection("${e.contractAddress}").setApprovalForToken("${this.getAddress()}", ${e.tokenId});

`);a.push("1"),r.push({assetContract:e.contractAddress,tokenType:1,totalAmount:1,tokenId:e.tokenId})}for(const e of o){if(!await P(this.contractWrapper.getProvider(),this.getAddress(),e.contractAddress,e.tokenId,c))throw new Error(`ERC1155 token "${e.tokenId}" with contract address "${e.contractAddress}" is not approved for transfer.

You can give approval the multiwrap contract to transfer this token by running:

await sdk.getEdition("${e.contractAddress}").setApprovalForAll("${this.getAddress()}", true);

`);a.push(e.totalRewards),r.push({assetContract:e.contractAddress,tokenType:2,totalAmount:u.from(e.quantityPerReward).mul(u.from(e.totalRewards)),tokenId:e.tokenId})}return{contents:r,numOfRewardUnits:a}}async prepare(t,r,a){return l.fromContractWrapper({contractWrapper:this.contractWrapper,method:t,args:r,overrides:a})}async call(t,r,a){return this.contractWrapper.call(t,r,a)}detectVrf(){if(Y(this.contractWrapper,"PackVRF"))return new ut(this.contractWrapper.getSignerOrProvider(),this.contractWrapper.address,this.storage,this.contractWrapper.options,this.chainId)}}export{T as Pack};
